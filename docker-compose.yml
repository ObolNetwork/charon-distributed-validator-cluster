version: "3.8"

x-node-base:
  # Pegged charon version (update this for each release).
  &node-base
  image: obolnetwork/charon:${CHARON_VERSION:-v0.11.0}
  restart: on-failure
  environment:
    - CHARON_BEACON_NODE_ENDPOINTS=${CHARON_BEACON_NODE_ENDPOINTS:-http://nimbus:5052}
    - CHARON_LOG_LEVEL=${CHARON_LOG_LEVEL:-info}
    - CHARON_LOG_FORMAT=${CHARON_LOG_FORMAT:-logfmt}
    - CHARON_P2P_BOOTNODES=${CHARON_P2P_BOOTNODES:-http://bootnode:3640/enr}
    - CHARON_P2P_EXTERNAL_HOSTNAME=${CHARON_P2P_EXTERNAL_HOSTNAME:-} # Empty default required to avoid warnings.
    - CHARON_P2P_TCP_ADDRESS=0.0.0.0:3610
    - CHARON_P2P_UDP_ADDRESS=0.0.0.0:3630
    - CHARON_VALIDATOR_API_ADDRESS=0.0.0.0:3600
    - CHARON_MONITORING_ADDRESS=0.0.0.0:3620
    - CHARON_JAEGER_ADDRESS=${CHARON_JAEGER_ADDRESS-jaeger:6831} # Overriding to empty address allowed
    - CHARON_JAEGER_SERVICE=charon
  env_file: .env
  networks: [ cluster ]
  depends_on: [ bootnode ]
  volumes:
    - ./.charon:/opt/charon/.charon/

services:
  #             _   _                         _           _ 
  #  _ __   ___| |_| |__   ___ _ __ _ __ ___ (_)_ __   __| |
  # | '_ \ / _ \ __| '_ \ / _ \ '__| '_ ` _ \| | '_ \ / _` |
  # | | | |  __/ |_| | | |  __/ |  | | | | | | | | | | (_| |
  # |_| |_|\___|\__|_| |_|\___|_|  |_| |_| |_|_|_| |_|\__,_|
  nethermind:
    image: nethermind/nethermind:${NETHERMIND_VERSION:-1.14.3}
    restart: on-failure
    ports:
      - ${NETHERMIND_PORT_P2P:-30303}:30303/tcp # P2P TCP
      - ${NETHERMIND_PORT_P2P:-30303}:30303/udp # P2P UDP
      - ${NETHERMIND_PORT_HTTP:-8545}:8545 # JSON-RPC
      - ${NETHERMIND_PORT_ENGINE:-8551}:8551 # ENGINE-API
    command: |
      --config=${ETH2_NETWORK:-goerli}
      --datadir=data
      --HealthChecks.Enabled=true
      --JsonRpc.Enabled=true
      --JsonRpc.JwtSecretFile="/root/jwt/jwt.hex"
      --JsonRpc.EngineHost=0.0.0.0
      --JsonRpc.EnginePort=8551
      --JsonRpc.Host=0.0.0.0
      --JsonRpc.Port=8545
    networks: [ cluster ]
    volumes:
      - ./data/nethermind:/nethermind/data
      - ./jwt:/root/jwt

  #          _           _               
  #  _ __ (_)_ __ ___ | |__  _   _ ___ 
  # | '_ \| | '_ ` _ \| '_ \| | | / __|
  # | | | | | | | | | | |_) | |_| \__ \
  # |_| |_|_|_| |_| |_|_.__/ \__,_|___/
  checkpoint-sync:
    image: statusim/nimbus-eth2:${NIMBUS_VERSION:-multiarch-v22.9.1}
    command: trustedNodeSync --network=goerli --data-dir=/opt/data/ --trusted-node-url=https://goerli.checkpoint-sync.ethpandaops.io
    networks: [ cluster ]
    volumes:
      - ./data/nimbus:/opt/data/

  nimbus:
    image: statusim/nimbus-eth2:${NIMBUS_VERSION:-multiarch-v22.9.1}
    ports:
      - ${NIMBUS_PORT_P2P:-9000}:9000/tcp # P2P TCP
      - ${NIMBUS_PORT_P2P:-9000}:9000/udp # P2P UDP
      - ${NIMBUS_PORT_HTTP:-5052}:5052/tcp
      - ${NIMBUS_PORT_METRICS:-8008}:8008/tcp # Metrics port
    restart: on-failure
    command: |
      --network=${ETH2_NETWORK:-goerli}
      --data-dir=/opt/data/
      --web3-url=http://nethermind:8551
      --log-level=info
      --tcp-port=9000
      --udp-port=9000
      --jwt-secret=/opt/jwt/jwt.hex
      --rest
      --rest-address=0.0.0.0
      --rest-port=5052
      --metrics
      --metrics-address=0.0.0.0
      --metrics-port=8008
    depends_on: [nethermind, checkpoint-sync]
    networks: [ cluster ]
    volumes:
      - ./data/nimbus:/opt/data/
      - ./jwt:/opt/jwt/

  #       _                                  _ _            _
  #   ___| |__   __ _ _ __ ___  _ __     ___| (_) ___ _ __ | |_ ___
  #  / __| '_ \ / _` | '__/ _ \| '_ \   / __| | |/ _ \ '_ \| __/ __|
  # | (__| | | | (_| | | | (_) | | | | | (__| | |  __/ | | | |_\__ \
  #  \___|_| |_|\__,_|_|  \___/|_| |_|  \___|_|_|\___|_| |_|\__|___/
  node0:
    <<: *node-base
    environment:
      CHARON_PRIVATE_KEY_FILE: /opt/charon/.charon/cluster/node0/charon-enr-private-key
      CHARON_JAEGER_SERVICE: node0
      CHARON_P2P_EXTERNAL_HOSTNAME: node0

  node1:
    <<: *node-base
    environment:
      CHARON_PRIVATE_KEY_FILE: /opt/charon/.charon/cluster/node1/charon-enr-private-key
      CHARON_JAEGER_SERVICE: node1
      CHARON_P2P_EXTERNAL_HOSTNAME: node1

  node2:
    <<: *node-base
    environment:
      CHARON_PRIVATE_KEY_FILE: /opt/charon/.charon/cluster/node2/charon-enr-private-key
      CHARON_JAEGER_SERVICE: node2
      CHARON_P2P_EXTERNAL_HOSTNAME: node2

  node3:
    <<: *node-base
    environment:
      CHARON_PRIVATE_KEY_FILE: /opt/charon/.charon/cluster/node3/charon-enr-private-key
      CHARON_JAEGER_SERVICE: node3
      CHARON_P2P_EXTERNAL_HOSTNAME: node3

  node4:
    <<: *node-base
    environment:
      CHARON_PRIVATE_KEY_FILE: /opt/charon/.charon/cluster/node4/charon-enr-private-key
      CHARON_JAEGER_SERVICE: node4
      CHARON_P2P_EXTERNAL_HOSTNAME: node4

  node5:
    <<: *node-base
    environment:
      CHARON_PRIVATE_KEY_FILE: /opt/charon/.charon/cluster/node5/charon-enr-private-key
      CHARON_JAEGER_SERVICE: node5
      CHARON_P2P_EXTERNAL_HOSTNAME: node5

  bootnode:
    <<: *node-base
    command: bootnode
    depends_on: []
    environment:
      CHARON_BOOTNODE_HTTP_ADDRESS: 0.0.0.0:3640
      CHARON_DATA_DIR: /opt/charon/bootnode
      CHARON_P2P_BOOTNODES: ""
      CHARON_P2P_EXTERNAL_HOSTNAME: bootnode
    volumes:
      - ./bootnode:/opt/charon/bootnode:rw

  #             _ _     _       _
  # __   ____ _| (_) __| | __ _| |_ ___  _ __ ___
  # \ \ / / _` | | |/ _` |/ _` | __/ _ \| '__/ __|
  #  \ V / (_| | | | (_| | (_| | || (_) | |  \__ \
  #   \_/ \__,_|_|_|\__,_|\__,_|\__\___/|_|  |___/
  vc0-lighthouse:
    build: lighthouse
    networks: [ cluster ]
    depends_on: [ node0 ]
    env_file: .env
    environment:
      NODE: node0
      ETH2_NETWORK: ${ETH2_NETWORK:-goerli}
    volumes:
      - ./lighthouse:/opt/charon/lighthouse
      - .charon/cluster/node0/validator_keys:/opt/charon/keys

  vc1-teku:
    image: consensys/teku:${TEKU_VERSION:-22.9.1}
    networks: [ cluster ]
    depends_on: [ node1 ]
    restart: on-failure
    command: |
      validator-client
      --beacon-node-api-endpoint="http://node1:3600"
      --config-file "/opt/charon/teku/teku-config.yaml"
    volumes:
      - .charon/cluster/node1/validator_keys:/opt/charon/validator_keys
      - ./teku:/opt/charon/teku

  vc2-vouch:
    build: vouch
    networks: [ cluster ]
    depends_on: [ node2 ]
    restart: on-failure
    environment:
      NODE: node2
    volumes:
      - .charon/cluster/node2:/opt/charon/node
      - ./vouch:/opt/charon/vouch

  vc3-lighthouse:
    build: lighthouse
    networks: [ cluster ]
    depends_on: [ node3 ]
    env_file: .env
    environment:
      NODE: node3
      ETH2_NETWORK: ${ETH2_NETWORK:-goerli}
    volumes:
      - ./lighthouse:/opt/charon/lighthouse
      - .charon/cluster/node3/validator_keys:/opt/charon/keys

  vc4-teku:
    image: consensys/teku:${TEKU_VERSION:-22.9.1}
    networks: [ cluster ]
    depends_on: [ node4 ]
    command: |
      validator-client
      --beacon-node-api-endpoint="http://node4:3600"
      --config-file "/opt/charon/teku/teku-config.yaml"
    volumes:
      - .charon/cluster/node4/validator_keys:/opt/charon/validator_keys
      - ./teku:/opt/charon/teku

  vc5-vouch:
    build: vouch
    networks: [ cluster ]
    depends_on: [ node5 ]
    restart: on-failure
    environment:
      NODE: node5
    volumes:
      - .charon/cluster/node5:/opt/charon/node
      - ./vouch:/opt/charon/vouch

  #                        _ _             _
  #  _ __ ___   ___  _ __ (_) |_ ___  _ __(_)_ __   __ _
  # | '_ ` _ \ / _ \| '_ \| | __/ _ \| '__| | '_ \ / _` |
  # | | | | | | (_) | | | | | || (_) | |  | | | | | (_| |
  # |_| |_| |_|\___/|_| |_|_|\__\___/|_|  |_|_| |_|\__, |
  #                                                |___/
  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION:-v2.38.0}
    ports:
      - "9090:9090"
    networks: [ cluster ]
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION:-9.0.7}
    ports:
      - "3000:3000"
    networks: [ cluster ]
    depends_on: [ prometheus ]
    volumes:
      - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/datasource.yml
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./grafana/dashboards:/etc/dashboards

  node-exporter:
    image: prom/node-exporter:${NODE_EXPORTER_VERSION:-v1.4.0}
    ports:
      - "9100:9100"
    networks: [ cluster ]

  jaeger:
    image: jaegertracing/all-in-one:${JAEGAR_VERSION:-1.38.0}
    networks: [ cluster ]
    ports:
      - "16686:16686"

networks:
  cluster:

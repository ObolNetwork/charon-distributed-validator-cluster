version: "3.8"

x-node-base:
  # Pegged charon version (update this for each release).
  &node-base
  image: obolnetwork/charon:${CHARON_VERSION}
  env_file: .env
  restart: unless-stopped
  networks: [cluster]
  depends_on: [bootnode]
  volumes:
    - ./.charon:/opt/charon/.charon/

services:
  #       _                                  _ _            _
  #   ___| |__   __ _ _ __ ___  _ __     ___| (_) ___ _ __ | |_ ___
  #  / __| '_ \ / _` | '__/ _ \| '_ \   / __| | |/ _ \ '_ \| __/ __|
  # | (__| | | | (_| | | | (_) | | | | | (__| | |  __/ | | | |_\__ \
  #  \___|_| |_|\__,_|_|  \___/|_| |_|  \___|_|_|\___|_| |_|\__|___/
  node0:
    <<: *node-base
    environment:
      CHARON_PRIVATE_KEY_FILE: /opt/charon/.charon/cluster/node0/charon-enr-private-key
      CHARON_JAEGER_SERVICE: node0
      CHARON_P2P_EXTERNAL_HOSTNAME: node0

  node1:
    <<: *node-base
    environment:
      CHARON_PRIVATE_KEY_FILE: /opt/charon/.charon/cluster/node1/charon-enr-private-key
      CHARON_JAEGER_SERVICE: node1
      CHARON_P2P_EXTERNAL_HOSTNAME: node1

  node2:
    <<: *node-base
    environment:
      CHARON_PRIVATE_KEY_FILE: /opt/charon/.charon/cluster/node2/charon-enr-private-key
      CHARON_JAEGER_SERVICE: node2
      CHARON_P2P_EXTERNAL_HOSTNAME: node2

  node3:
    <<: *node-base
    environment:
      CHARON_PRIVATE_KEY_FILE: /opt/charon/.charon/cluster/node3/charon-enr-private-key
      CHARON_JAEGER_SERVICE: node3
      CHARON_P2P_EXTERNAL_HOSTNAME: node3

  node4:
    <<: *node-base
    environment:
      CHARON_PRIVATE_KEY_FILE: /opt/charon/.charon/cluster/node4/charon-enr-private-key
      CHARON_JAEGER_SERVICE: node4
      CHARON_P2P_EXTERNAL_HOSTNAME: node4

  node5:
    <<: *node-base
    environment:
      CHARON_PRIVATE_KEY_FILE: /opt/charon/.charon/cluster/node5/charon-enr-private-key
      CHARON_JAEGER_SERVICE: node5
      CHARON_P2P_EXTERNAL_HOSTNAME: node5

  bootnode:
    <<: *node-base
    command: bootnode
    depends_on: []
    environment:
      CHARON_BOOTNODE_HTTP_ADDRESS: 0.0.0.0:3640
      CHARON_DATA_DIR: /opt/charon/bootnode
      CHARON_P2P_BOOTNODES: ""
      CHARON_P2P_EXTERNAL_HOSTNAME: bootnode
    volumes:
      - ./bootnode:/opt/charon/bootnode:rw

  #             _ _     _       _
  # __   ____ _| (_) __| | __ _| |_ ___  _ __ ___
  # \ \ / / _` | | |/ _` |/ _` | __/ _ \| '__/ __|
  #  \ V / (_| | | | (_| | (_| | || (_) | |  \__ \
  #   \_/ \__,_|_|_|\__,_|\__,_|\__\___/|_|  |___/
  vc0-lighthouse:
    build: lighthouse
    networks: [cluster]
    depends_on: [node0]
    env_file: .env
    environment:
      NODE: node0
    volumes:
      - ./lighthouse:/opt/charon/lighthouse
      - .charon/cluster/node0/validator_keys:/opt/charon/keys

  vc1-teku:
    image: consensys/teku:${TEKU_VERSION}
    networks: [cluster]
    depends_on: [node1]
    restart: on-failure
    command: |
      validator-client
      --beacon-node-api-endpoint="http://node1:3600"
      --config-file "/opt/charon/teku/teku-config.yaml"
      --network ${ETH2_NETWORK}
    volumes:
      - .charon/cluster/node1/validator_keys:/opt/charon/keys
      - ./teku/:/opt/charon/teku

  vc2-lighthouse:
    build: lighthouse
    networks: [cluster]
    depends_on: [node2]
    env_file: .env
    environment:
      NODE: node2
    volumes:
      - ./lighthouse:/opt/charon/lighthouse
      - .charon/cluster/node2/validator_keys:/opt/charon/keys

  vc3-teku:
    image: consensys/teku:${TEKU_VERSION}
    networks: [cluster]
    depends_on: [node3]
    command: |
      validator-client
      --beacon-node-api-endpoint="http://node3:3600"
      --config-file "/opt/charon/teku/teku-config.yaml"
      --network ${ETH2_NETWORK}
    volumes:
      - .charon/cluster/node3/validator_keys:/opt/charon/keys
      - ./teku/:/opt/charon/teku
    
  vc4-lighthouse:
    build: lighthouse
    networks: [cluster]
    depends_on: [node4]
    env_file: .env
    environment:
      NODE: node4
    volumes:
      - ./lighthouse:/opt/charon/lighthouse
      - .charon/cluster/node4/validator_keys:/opt/charon/keys

  vc5-teku:
    image: consensys/teku:${TEKU_VERSION}
    networks: [cluster]
    depends_on: [node5]
    command: |
      validator-client
      --beacon-node-api-endpoint="http://node5:3600"
      --config-file "/opt/charon/teku/teku-config.yaml"
      --network ${ETH2_NETWORK}
    volumes:
      - .charon/cluster/node5/validator_keys:/opt/charon/keys
      - ./teku/:/opt/charon/teku

  #                        _ _             _
  #  _ __ ___   ___  _ __ (_) |_ ___  _ __(_)_ __   __ _
  # | '_ ` _ \ / _ \| '_ \| | __/ _ \| '__| | '_ \ / _` |
  # | | | | | | (_) | | | | | || (_) | |  | | | | | (_| |
  # |_| |_| |_|\___/|_| |_|_|\__\___/|_|  |_|_| |_|\__, |
  #                                                |___/
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    networks: [cluster]
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    networks: [cluster]
    depends_on: [prometheus]
    volumes:
      - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/datasource.yml
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./grafana/dashboards:/etc/dashboards

  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    networks: [cluster]

  jaeger:
    image: jaegertracing/all-in-one:latest
    networks: [cluster]
    ports:
      - "16686:16686"

networks:
  cluster:
